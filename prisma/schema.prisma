// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  email     String   @unique @map("email")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  name      String   @map("name")
  phone_Number   String @map("phone_Number")
  intro      String?   @map("intro")
  emailTokens String? @map("emailTokens")
  profile_Image String? @map("profile_Image")
  age           Int? @map("age")
  gender        Gender @map("gender")
  user_status User_Status @default(nonpass)
  reviews Reviews[]
  pets Pets[]
  @@map("Users")
}

enum User_Status {
  pass
  nonpass
}

enum Gender {
  MALE
  FEMALE
}

model Reviews {
  reviewId  Int      @id @default(autoincrement()) @map("reviewId")
  sitterId  Int      @map("sitterId")
  userId    Int      @map("userId")
  title     String   @map("title")
  content   String   @map("content") @db.Text
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  star      Int      @map("star")
  sitter    Sitters  @relation(fields: [sitterId], references: [sitterId], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("Reviews")
}


model Sitters {
  sitterId       Int            @id @default(autoincrement()) @map("sitterId")
  email          String         @unique @map("email")
  name           String         @map("name") @db.VarChar(50)
  profile_Image  String?        @map("profile_Image")
  emailTokens    String?        @map("emailTokens")
  phone_Number   String         @map("phone_Number")
  password       String         @map("password")
  createdAt      DateTime       @default(now()) @map("createdAt")
  updatedAt      DateTime       @updatedAt @map("updatedAt")
  career         Int            @map("career")
  sitter_Status  Sitter_Status  @default(nonpass)     
  intro          String?        @map("intro")
  age            Int?           @map("age")
  gender         Gender?         @map("gender")
  address_Sitters Address_Sitters   @map("address_Sitters")
  ablePetType    Ablepettype    @map("ablePetType")
  reservations   Reservations[]
  reviews        Reviews[]

  @@map("Sitters")
}
enum Address_Sitters {
  seoul
  gyeonggi
  gangwon
  chungbuk
  chungnam
  jeonbuk
  jeonnam
  gyeongbuk
  gyeongnam
  jeju
}


enum Sitter_Status {
  pass
  nonpass
}


enum Ablepettype {
  dog
  cat
  others
}

model Reservations {
  Id             Int              @id @default(autoincrement()) @map("Id")
  sitterId       Int
  startDay       DateTime
  lastDay        DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  status         TASKSTATUS       @default(ACCEPTED)
  reservationPet ReservationPet[]
  sitters        Sitters          @relation(fields: [sitterId], references: [sitterId], onDelete: Cascade)
}

enum TASKSTATUS {
  ACCEPTED
  APPLYING 
  REJECTED 
}

model ReservationPet {
  reservationPetId Int          @id @default(autoincrement())
  petId            Int
  Id               Int
  reservations     Reservations @relation(fields: [Id], references: [Id], onDelete: Cascade)
  pets             Pets         @relation(fields: [petId], references: [petId], onDelete: Cascade)
}

model Pets {
  petId          Int              @id @default(autoincrement()) @map("petId")
  namePet        String           @map("namePet") @db.VarChar(50)
  userId         Int              @map("userId")
  petType        PETTYPE          @map("petType")
  age            Int              @map("age")
  pet_Image      String?           @map("pet_Image")
  reservationPet ReservationPet[]
  user           Users            @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

enum PETTYPE {
  dog
  cat
  others
}
